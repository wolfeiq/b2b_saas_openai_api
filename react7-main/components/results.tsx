import { ReactElement, JSXElementConstructor, ReactNode, PromiseLikeOfReactNode } from "react";

interface ResultsProps {
    prompt: string;
    pitch: string;
    snippet: string;
    onBack: any;
    characterPitchLimit: number;
    setPitch: any;
    onSubmitPitch: any;
  }
  
  const Results: React.FC<ResultsProps> = (props) => {
    const keywordElements = [];
    const isPitchValid = props.pitch.length < props.characterPitchLimit;
    const updatePitchValue = (text: string) => {
      if (text.length <= props.characterPitchLimit) {
        props.setPitch(text);
      }
    };
    let statusColor = "text-slate-500";
    let statusText: string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | PromiseLikeOfReactNode | null | undefined = null;
    if (!isPitchValid) {
      statusColor = "text-red-400";
      statusText = `Input must be less than ${props.characterPitchLimit} characters.`;
    }

   
    const resultSection1 = (label: string, body: any) => {
      return (
       <div className="bg-slate-700 p-4 my-3 rounded-md">
        <div className="text-slate-400 text-sm font-bold mb-4">{label}</div>
        <textarea 
        rows={4}
        className="w-full text-white text-sm mb-4 bg-slate-700"  
        placeholder={body}
        value={props.pitch}
        onChange={(e) => updatePitchValue(e.currentTarget.value)}
      ></textarea>
      <div className={statusColor + " flex justify-between my-2 mb-6 text-sm"}>
          <div>{statusText}</div>
          <div>
            {props.pitch.length}/{props.characterPitchLimit}
          </div>
        </div>
      </div>
      );
    };
    const resultSection = (label: string, body: any) => {
        return (
          <div className="bg-slate-700 p-4 my-3 rounded-md">
            <div className="text-slate-400 text-sm font-bold mb-4">{label}</div>
            <div>{body}</div>
          </div>
        );
      };
  
    return (
      <>
        <div className="mb-6">
          {resultSection(
            "Your Company",
           
            <div className="text-lg font-bold">{props.prompt}</div>
          )}
          {resultSection1("Template Pitch Generated by AI", props.snippet)}
        </div>
        <div className="mb-6 text-slate-400 text-sm">
          <p>
          Note: We will also use your company&apos;s website for the color scheme and tone of your sales pitch video.  
          </p>
        </div>
        <button
          className="bg-black disabled:opacity-50 w-full p-2 rounded-md text-lg"
         onClick={props.onSubmitPitch}

        >
          Next
        </button>
        &nbsp;
        <button
          className="bg-black opacity-80 w-full p-2 rounded-md text-lg"
          onClick={props.onBack}
        >
          Back
        </button>
      </>
    );
  };
  
  export default Results;